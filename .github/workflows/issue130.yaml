###############################################################
#
## Copyright (©) 2024-2025 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 05-MAY-2025 at 1450 EDT by David Hoyt (©)
#
## Intent: Issue113
#
#
#
#
#
#
#
#
#
#
#
###############################################################

name: "Issue113"

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build PoC Stub off research Branch for Issue113
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Git Identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Install Dependencies
        run: |
          echo "=== Installing Build and Runtime Dependencies ==="
          sudo apt-get update
          sudo apt-get install -y \
            libpng-dev libjpeg-dev libxml2 libxml2-dev libtiff-dev nlohmann-json3-dev \
            build-essential cmake clang clang-tools python3 python3-pip \
            libwxgtk3.2-dev wx-common libopencl-clang-17-dev curl git \
            llvm clang-17
      - name: Get research for Stub Build for Issue113
        run: |
          echo "=== Cloning off research Branch ==="
          git clone https://github.com/xsscx/PatchIccMAX.git
          cd PatchIccMAX
          git checkout research
          echo "=== DONE Cloning PatchIccMAX for research ==="
      - name: Configure with CMake (ASAN + Debug)
        run: |
          echo "=== Configuring from research ==="
          cd PatchIccMAX/Build
          export CC=gcc
          export CXX=g++
          export PATH="/usr/lib/llvm-17/bin:$PATH"
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          clang++ --version
          clang --version
           cmake   -DCMAKE_INSTALL_PREFIX="$HOME/.local"   -DCMAKE_BUILD_TYPE=Debug   -DENABLE_TOOLS=ON   -DENABLE_SHARED_LIBS=ON   -DENABLE_STATIC_LIBS=ON   -DENABLE_TESTS=ON   -DENABLE_INSTALL_RIM=ON   -DENABLE_ICCXML=ON   -DICC_TRACE_NAN_ENABLED=ON   -DICC_CLUT_DEBUG=ON   -DCMAKE_CXX_FLAGS="-g -O0 -fsanitize=address,undefined -fno-omit-frame-pointer -fno-inline -Wall -Wextra -DICC_TRACE_NAN_ENABLED -DICC_CLUT_DEBUG -DICC_ENABLE_ASSERTS -DICC_LOG_SAFE"   -DCMAKE_EXE_LINKER_FLAGS="-lX11 -fsanitize=address,undefined"   Cmake/
      - name: Build research for Issue113
        run: |
          echo "=== Starting Build ==="
          cd PatchIccMAX/Build
          make -j$(nproc)
      - name: Run Unit Tests (CI Harness)
        run: |
          echo "========= BEGIN Stub ========="
          cd PatchIccMAX/Testing
          # Add Tools/* to PATH
          for d in ../Build/Tools/*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          echo "STUB"
          echo "=================== Running Issue 113 Checks off research Branch ========================================="
          echo "=== Running Dump Profiles for Issue 113 ==="      
          set +e
          dir=../Testing/Issue113; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && echo ">>> Dumping: $f" && ../Build/Tools/IccDumpProfile/iccDumpProfile -v "$f"; done || true
          dir=../Testing/Issue113; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && echo ">>> RoundTripping: $f" && ../Build/Tools/IccRoundTrip/iccRoundTrip "$f"; done || true
          EXIT_CODE=$?
          if [ "$EXIT_CODE" -ne 0 ]; then
          echo "PoC executed as expected with failure code $EXIT_CODE."
          else
          echo "PoC unexpectedly succeeded. Please verify runtime behavior."
          fi
          echo "========= STUB EXIT ========="
      - name: Verify Build Output
        run: |
          echo "=== Verifying Build Result ==="
          if [ -f PatchIccMAX/Build/CMakeCache.txt ]; then
            echo "Build configuration exists."
          else
            echo "Build configuration failed."
            exit 1
          fi
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: patchiccmax-linux-binaries
          path: PatchIccMAX/Build

      - name: Upload CMake Logs
        uses: actions/upload-artifact@v4
        with:
          name: patchiccmax-cmake-log
          path: PatchIccMAX/Build/CMakeCache.txt
          
      - name: Summary Report
        if: always()
        run: |
          echo "### Ubuntu Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build Directory: PatchIccMAX/Build/" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts Uploaded: iccmax-macos-clang" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY
