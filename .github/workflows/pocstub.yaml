###############################################################
#
## Copyright (©) 2024-2025 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 22-JULY-2025 at 1030 EDT by David Hoyt (©)
#
## Intent: PoCStub
#
#
#
#
#
#
#
#
#
#
#
###############################################################

name: "PoCStub"

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build PoC Stub off main Branch
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: ⏬ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Set Up Git Identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: 🧰 Install Dependencies
        run: |
          echo "=== Installing Build and Runtime Dependencies ==="
          sudo apt-get update
          sudo apt-get install -y \
            libpng-dev libjpeg-dev libxml2 libxml2-dev libtiff-dev nlohmann-json3-dev \
            build-essential cmake clang clang-tools python3 python3-pip \
            libwxgtk3.2-dev wx-common libopencl-clang-17-dev curl git \
            llvm clang-17
      - name: 📦 Get research for Stub Build
        run: |
          echo "=== Cloning off master Branch ==="
          git clone https://github.com/xsscx/PatchIccMAX.git
          cd PatchIccMAX
          echo "=== DONE Cloning PatchIccMAX for POCSTUB ==="
      - name: 🏗️ Configure with CMake (ASAN + Debug)
        run: |
          echo "=== Configuring from research ==="
          cd PatchIccMAX/Build
          export CC=gcc
          export CXX=g++
          export PATH="/usr/lib/llvm-17/bin:$PATH"
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          clang++ --version
          clang --version
           cmake   -DCMAKE_INSTALL_PREFIX="$HOME/.local"   -DCMAKE_BUILD_TYPE=Debug   -DENABLE_TOOLS=ON   -DENABLE_SHARED_LIBS=ON   -DENABLE_STATIC_LIBS=ON   -DENABLE_TESTS=ON   -DENABLE_INSTALL_RIM=ON   -DENABLE_ICCXML=ON   -DICC_TRACE_NAN_ENABLED=ON   -DICC_CLUT_DEBUG=ON   -DCMAKE_CXX_FLAGS="-g -O0 -fsanitize=address,undefined -fno-omit-frame-pointer -fno-inline -Wall -Wextra -DICC_TRACE_NAN_ENABLED -DICC_CLUT_DEBUG -DICC_ENABLE_ASSERTS -DICC_LOG_SAFE"   -DCMAKE_EXE_LINKER_FLAGS="-lX11 -fsanitize=address,undefined"   Cmake/
      - name: 🔨 Build research
        run: |
          echo "=== Starting Build ==="
          cd PatchIccMAX/Build
          make -j$(nproc)
      - name: 🧪 Run Unit Tests (CI Harness)
        run: |
          echo "========= BEGIN Stub ========="
          cd PatchIccMAX/Testing
          echo "🗂️ Current directory:"
          pwd
          echo "📁 Listing contents:"
          ls -la
          # Add Tools/* to PATH
          for d in ../Build/Tools/*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          echo "🔁 STUB"
          echo "=================== Running CreateAllProfiles & RunTests ========================================="
          sh CreateAllProfiles.sh
          sh RunTests.sh
          pwd
          ls
          echo "=================== DON ========================================="
          echo "▶️ Executing round-trip PoC..."
          echo "=================== Running TC PoC off master Branch ========================================="
          echo "PoC iccRoundTrip Testing/ICS/Rec2100HlgFull-Part2.icc"
          set +e  # Allow failure (crash) without exiting script
          ../Build/Tools/IccRoundTrip/iccRoundTrip ICS/Rec2100HlgFull-Part2.icc
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
          echo "💥 PoC executed as expected with failure code $EXIT_CODE."
          echo "✅ Crash = Success (as designed for PoC-NaN-Eval-L141)"
          else
          echo "⚠️ PoC unexpectedly succeeded. Please verify runtime behavior."
          fi
          echo "=== Running Test Unit Dump ICS/Rec2100HlgFull-Part2.icc ==="
          ../Build/Tools/IccDumpProfile/iccDumpProfile -v ICS/Rec2100HlgFull-Part2.icc
          echo "=== Running Test Unit Dump All ==="      
          dir=../Testing/Runner; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && ../Build/Tools/IccDumpProfile/iccDumpProfile -v "$f"; done
          echo "✅ Done"
          echo "=== Running Test Unit RoundTrip All ==="      
          dir=../Testing/Runner; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && ../Build/Tools/IccRoundTrip/iccRoundTrip "$f"; done
          echo "✅ Done"
          echo "========= STUB EXIT ========="
      - name: 🧾 System Diagnostics
        run: |
          echo "=== System Info ==="
          uname -a
          cat /etc/os-release
          gcc -v
          lscpu
          free -m
          df -h
      - name: ✅ Verify Build Output
        run: |
          echo "=== Verifying Build Result ==="
          if [ -f PatchIccMAX/Build/CMakeCache.txt ]; then
            echo "✅ Build configuration exists."
          else
            echo "❌ Build configuration failed."
            exit 1
          fi
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: patchiccmax-linux-binaries
          path: PatchIccMAX/Build

      - name: 📤 Upload CMake Logs
        uses: actions/upload-artifact@v4
        with:
          name: patchiccmax-cmake-log
          path: PatchIccMAX/Build/CMakeCache.txt
          
      - name: Summary Report
        if: always()
        run: |
          echo "### Ubuntu Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build Directory: PatchIccMAX/Build/" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts Uploaded: iccmax-linux-clang" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY
