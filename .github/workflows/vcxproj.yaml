###############################################################
#
## Copyright (¬©) 2024-2025 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 08-APRIL-2025 at 1156 EDT by David Hoyt (¬©)
#
## Intent: vcxproj
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: vcxproj

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: üîπ [INIT] Checkout Repository
        uses: actions/checkout@v4

      - name: üîπ [INIT] Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: üîπ [CACHE] Restore vcpkg Cache
        uses: actions/cache@v3
        with:
          path: C:\test\vcpkg
          key: Win70-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/bootstrap-vcpkg.bat') }}
          restore-keys: |
            Win70-${{ runner.os }}-
      - name: üîπ [SETUP] Environment & Build Preparation
        shell: pwsh
        run: |
          Write-Host "============================= Starting DemoIccMAX Master Branch Build =============================" -ForegroundColor Green
          Write-Host "¬© 2024-2025 David H Hoyt LLC. All rights reserved." -ForegroundColor Green
          Write-Host "üîπ Setting up environment variables..."
          $env:VSCMD_ARG_HOST_ARCH = "x64"
          $env:VSCMD_ARG_TGT_ARCH = "x64"
          $optDir = "C:\test"
          $vcpkgDir = "$optDir\vcpkg"
          $patchDir = "$optDir\DemoIccMAX"
          # Setup git config
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          # Ensure base directories exist
          if (-Not (Test-Path $optDir)) { 
              New-Item -ItemType Directory -Path $optDir | Out-Null
          }
          # Validate vcpkg exists, else clone & bootstrap
          if (-Not (Test-Path "$vcpkgDir\vcpkg.exe")) {
              Write-Host "üîπ vcpkg not found. Cloning and bootstrapping..."
              cd $optDir
              Remove-Item -Recurse -Force $vcpkgDir -ErrorAction Ignore
              git clone https://github.com/microsoft/vcpkg.git
              cd $vcpkgDir
              Write-Host "üîπ Bootstrapping vcpkg..."
              .\bootstrap-vcpkg.bat
          }
          # Ensure vcpkg is ready
          if (-Not (Test-Path "$vcpkgDir\vcpkg.exe")) {
              Write-Host "‚ùå ERROR: vcpkg.exe missing even after bootstrap!" -ForegroundColor Red
              exit 1
          }
          Write-Host "üîπ Installing dependencies via vcpkg..."
          cd $vcpkgDir
          .\vcpkg.exe integrate install
          .\vcpkg.exe install nlohmann-json:x64-windows nlohmann-json:x64-windows-static libxml2:x64-windows tiff:x64-windows wxwidgets:x64-windows libxml2:x64-windows-static tiff:x64-windows-static wxwidgets:x64-windows-static
      - name: üîπ [FETCH] Clone DemoIccMAX Repository
        shell: pwsh
        run: |
          $patchDir = "C:\test\DemoIccMAX"
          Write-Host "üîπ Cloning DemoIccMAX repository..."
          cd C:\test
          if (Test-Path $patchDir) {
              Remove-Item -Recurse -Force $patchDir -ErrorAction Ignore
          }
          git clone https://github.com/InternationalColorConsortium/DemoIccMAX.git
          cd $patchDir
          Write-Host "üîπ Repository structure:"
          Get-ChildItem -Recurse -Force
      - name: üîπ [BUILD] Compile Projects
        shell: pwsh
        run: |
          Write-Host "üîπ Starting MSBuild Compilation..." -ForegroundColor Yellow
          $projects = @(
              "IccXML\IccLibXML\IccLibXML_CRTDLL_v22.vcxproj",
              "IccXML\IccLibXML\IccLibXML_v22.vcxproj",
              "IccProfLib\IccProfLib_CRTDLL_v22.vcxproj",
              "IccProfLib\IccProfLib_DLL_v22.vcxproj",
              "IccProfLib\IccProfLib_v22.vcxproj",
              "IccXML\CmdLine\IccFromXml\IccFromXml_v22.vcxproj",
              "IccXML\CmdLine\IccToXml\IccToXml_v22.vcxproj",
              "Tools\CmdLine\IccDumpProfile\iccDumpProfile_v22.vcxproj",
              "Tools\CmdLine\IccFromCube\iccFromCube_v16.vcxproj",
              "Tools\CmdLine\IccRoundTrip\iccRoundTrip_v22.vcxproj",
              "Tools\CmdLine\IccV5DspObsToV4Dsp\IccV5DspObsToV4Dsp_v22.vcxproj",
              "Tools\Winnt\DemoIccMAXCmm\DemoIccMAXCmm_v22.vcxproj"
          )
          foreach ($project in $projects) {
              Write-Host "üîπ Building: $project"
              msbuild /m /maxcpucount "C:\test\DemoIccMAX\$project" /p:Configuration=Release /p:Platform=x64 /p:AdditionalIncludeDirectories="C:\test\vcpkg\installed\x64-windows\include" /p:AdditionalLibraryDirectories="C:\test\vcpkg\installed\x64-windows-static\lib" /p:CLToolAdditionalOptions="/MT /Zi /Od /DDEBUG /W4" /p:LinkToolAdditionalOptions="/NODEFAULTLIB:msvcrt /LTCG /OPT:REF /INCREMENTAL:NO"
          }
          Write-Host "üîπ Copying DLLs and libraries for testing..."
          cd "C:\test\DemoIccMAX\Testing"
          Copy-Item "C:\test\vcpkg\installed\x64-windows\bin\*.dll" .
          # Copy-Item "C:\test\vcpkg\installed\x64-windows-static\lib\*.lib" .
          Write-Host "üîπ Testing directory structure:"
          Get-ChildItem -Recurse -Force
          # Run .exe files
          Write-Host "Running .exe files..."
          Get-ChildItem -Path "." -Recurse -Filter *.exe | ForEach-Object { Write-Host "Running: $($_.FullName)"; & $_.FullName }
          # Run CreateAllProfiles.bat
          Write-Host "Running CreateAllProfiles.bat..."
          $tempFile = "$env:TEMP\CreateAllProfiles.bat"
          iwr -Uri "https://raw.githubusercontent.com/InternationalColorConsortium/DemoIccMAX/refs/heads/master/contrib/UnitTest/CreateAllProfiles.bat" -OutFile $tempFile
          & $tempFile
          Remove-Item $tempFile
          Write-Host "============================= Build Completed =============================" -ForegroundColor Green
      - name: üì§ [UPLOAD] Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-Artifacts
          path: C:\test\DemoIccMAX

      - name: üì§ [UPLOAD] Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: ${{ github.workspace }}/logs
