###############################################################
#
## Copyright (¬©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 07-MAR-2025 1316 EST by David Hoyt (¬©)
#
## Intent: xnu-x86_64-debug-asan
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: "xnu-x86_64-debug-asan"

on:
  workflow_dispatch: # Manual trigger only

jobs:
  build-macos:
    name: Build Master Branch
    runs-on: macos-latest
    strategy:
      fail-fast: false

    steps:
      - name: Start Process
        run: echo "üèÅ XNU x86_64 Debug Asan .. starting ..."

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git anonymous identity
        run: |
          echo "üîß Configuring Git identity..."
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          echo "‚úî Git identity set successfully."
      - name: Clone repository and install dependencies
        run: |
          echo "üì• Cloning PatchIccMAX repository..."
          git clone https://github.com/xsscx/PatchIccMAX.git
          cd PatchIccMAX
          echo "üì¶ Installing Homebrew dependencies..."
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff jpeg || echo "‚ö†Ô∏è Some dependencies might already be installed."
          echo "‚úî Dependency installation complete."
      - name: CMake Configure
        run: |
          echo "‚öôÔ∏è Setting up CMake build configuration..."
          mkdir -p PatchIccMAX/Build
          cd PatchIccMAX/Build
          sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h
          echo 'export PATH="/opt/homebrew/opt/jpeg/bin:$PATH"' >> /Users/runner/.bash_profile
          export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig"
          export CFLAGS="-I$(brew --prefix libpng)/include -I$(brew --prefix jpeg)/include"
          export LDFLAGS="-L$(brew --prefix libpng)/lib -L$(brew --prefix jpeg)/lib"
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
                -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_TOOLS=ON \
                -DENABLE_STATIC_LIBS=ON \
                -DENABLE_SHARED_LIBS=ON \
                -DJPEG_LIBRARY=$(brew --prefix jpeg)/lib/libjpeg.dylib \
                -DJPEG_INCLUDE_DIR=$(brew --prefix jpeg)/include \
                -Wno-dev Cmake/
          echo "‚úî CMake configuration complete."
      - name: Build project with CMake
        run: |
          echo "üõ†Ô∏è Starting build process..."
          cd PatchIccMAX/Build
          make -j$(sysctl -n hw.ncpu)
          echo "‚úî Build process completed. Listing generated files..."
          find . -type f \( \( -perm -111 \) -o -name "*.a" -o -name "*.so" -o -name "*.dylib" \) -mmin -1440 ! -path "*/.git/*" ! -path "*/CMakeFiles/*" ! -name "*.sh" -exec ls -lh {} \;
          echo "üß™ Running tests..."
          cd ../Testing
          /bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/development/contrib/UnitTest/CreateAllProfiles_cross_check.sh)" || { echo "‚ùå Profile creation failed. Exiting."; exit 1; }
          # /bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/development/contrib/UnitTest/RunTests_asan.sh)" || { echo "‚ùå Test execution failed. Exiting."; exit 1; }
          # mkdir tagcheck
          # cd tagcheck
          # pwd
          # wget https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/development/contrib/UnitTest/TestCIccTagXmlProfileSequenceId.cpp
          # sh -c "$(curl -fsSL https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/development/contrib/UnitTest/TestCIccTagXmlProfileSequenceId.sh)"
          # cd ../
          # rm -rf elemread
          # mkdir elemread
          # cd elemread
          # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/InternationalColorConsortium/DemoIccMAX/refs/heads/master/contrib/UnitTest/icSigMatrixElemType-Read-poc.sh)"
          # cd ../
          # /bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/InternationalColorConsortium/DemoIccMAX/refs/heads/master/contrib/UnitTest/CreateAllProfiles.sh)"
          # cd ../
          pwd
          ls -tla
          echo "‚úî Tests completed successfully."
      - name: Check build success
        run: |
          echo "üîç Verifying build success..."
          if [ $? -eq 0 ]; then
            echo "‚úÖ Build Succeeded"
          else
            echo "‚ùå Build Failed"
            exit 1
          fi
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: main_ci_macos_build
          path: PatchIccMAX/Build

      - name: Upload logs and text files
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            PatchIccMAX/**/*.log
            PatchIccMAX/**/*.txt
        continue-on-error: true

      - name: Upload test ZIP files
        uses: actions/upload-artifact@v4
        with:
          name: testing_zip_files
          path: PatchIccMAX/Testing/**/*.zip
        continue-on-error: true

      - name: End Process
        run: echo "üèÅ XNU x86_64 Debug Asan build process completed successfully."
        
