###############################################################
#
## Copyright (©) 2024-2025 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 12-MAY-2025 at 0700 EDT by David Hoyt (©)
#
## Intent: CacheLegacy8
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: "CacheLegacy8"

on:
  workflow_dispatch:

jobs:
  build:
    name: "🔧 Build on ${{ matrix.os }} with ${{ matrix.compiler }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc
          - os: ubuntu-22.04
            compiler: clang
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: macos-latest
            compiler: clang
          - os: macos-13
            compiler: clang

    steps:
      - name: 🧾 Checkout PR Source
        uses: actions/checkout@v4

      - name: 💾 Restore Build Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache
            ~/.ccache
            Build
          key: CacheLegacy6-${{ runner.os }}-build-${{ matrix.compiler }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            CacheLegacy6-${{ runner.os }}-build-${{ matrix.compiler }}-
      - name: ⚙️ Configure Git Identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: 📦 Install Build Dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libjpeg-dev cmake gcc g++ clang clang-tools libgtk-3-dev libpng-dev libjpeg-dev libtiff-dev libexpat1-dev libxml2 libxml2-dev nlohmann-json3-dev python3 python3-pip curl git llvm
      - name: 🍺 Install Build Dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff jpeg
      - name: 🧱 Build wxWidgets (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          git clone https://github.com/wxWidgets/wxWidgets.git
          cd wxWidgets
          git submodule update --init --recursive
          ./configure --enable-debug --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          sudo ldconfig
      - name: 💡 Set Compiler Environment
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
      - name: 🧼 Clear CMake Cache (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          rm -rf Build/CMakeCache.txt Build/CMakeFiles
      - name: 🛠️ CMake Configure
        run: |
          sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h
          cd Build
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include"
            export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig"
            export CFLAGS="-I$(brew --prefix libpng)/include -I$(brew --prefix jpeg)/include"
            export LDFLAGS="-L$(brew --prefix libpng)/lib -L$(brew --prefix jpeg)/lib"
            JPEG_LIB="$(brew --prefix jpeg)/lib/libjpeg.dylib"
            JPEG_INC="$(brew --prefix jpeg)/include"
          else
            JPEG_LIB="/usr/lib/x86_64-linux-gnu/libjpeg.so"
            JPEG_INC="/usr/include"
          fi
          cmake \
            -DCMAKE_C_COMPILER=${{ env.CC }} \
            -DCMAKE_CXX_COMPILER=${{ env.CXX }} \
            -DCMAKE_INSTALL_PREFIX=$HOME/.local \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_TOOLS=ON \
            -DENABLE_STATIC_LIBS=ON \
            -DENABLE_SHARED_LIBS=ON \
            -DJPEG_LIBRARY=${JPEG_LIB} \
            -DJPEG_INCLUDE_DIR=${JPEG_INC} \
            -Wno-dev Cmake/
      - name: 🔨 Build Project
        run: |
          cd Build
          make -j$(nproc || sysctl -n hw.logicalcpu)
      - name: 🔨 Run Stub
        run: |
          cd Testing
          # sh CreateAllProfiles.sh
          echo "========= BEGIN OUTSIDE COV STUB for mtx ========="
          # Add Tools/* to PATH
          for d in ../Build/Tools/*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          set +e
          echo "========= BEGIN INSIDE STUB for Testing =============="
          pwd
          sh CreateAllProfiles.sh       
          cd CalcTest
          sh checkInvalidProfiles.sh
          cd ..
          cd HDR
          sh mkprofiles.sh
          cd ..
          cd Overprint
          sh RunTests.sh
          cd .. 
          cd mcs
          sh updateprevWithBkgd.sh
          sh updateprev.sh
          cd ..
          ls
          pwd
          echo "========= EXIT INSIDE STUB for Testing =============="
          echo "========= EXIT OUTSIDE STUB for mtx ========="
      - name: ✅ Verify Build Output
        run: |
          test -f Build/CMakeCache.txt && echo "✅ CMake cache present" || (echo "❌ Build failed" && exit 1)
      - name: 🧳 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-${{ matrix.os }}-${{ matrix.compiler }}-release
          path: Build

      - name: 📄 Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: cmake-log-${{ matrix.os }}-${{ matrix.compiler }}
          path: Build/CMakeCache.txt

      - name: 🖥️ Host System Info
        run: |
          uname -a
          if [[ "${{ matrix.os }}" == macos* ]]; then
            sw_vers
            clang --version
            sysctl -a | grep machdep.cpu
          else
            cat /etc/os-release
            ${{ matrix.compiler }} --version
            lscpu
          fi
          free -m || true
          df -h
      - name: Summary Report
        if: always()
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build Directory: PatchIccMAX/Build/" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts Uploaded: iccmax-${{ matrix.os }}-${{ matrix.compiler }}-release" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY
