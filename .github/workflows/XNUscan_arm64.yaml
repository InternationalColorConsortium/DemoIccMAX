###############################################################
#
## Copyright (¬©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 13-MAY-2025 at 1900 EDT by David Hoyt (¬©)
#
## Intent: XNU ColorBleedDemo | Work in Progress
#
## TODO: Instrumentation for AFL=Bool Builds & Report
#

#
#
###############################################################

name: "ColorBleed | XNU arm64"

on:
  workflow_dispatch:

jobs:
  build-macos-arm64:
    name: Color Bleed Scanner Demo | XNU arm64 
    runs-on: macos-latest

    strategy:
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git anonymous identity
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
    - name: Install dependencies
      run: |
        brew install nlohmann-json libxml2 wxwidgets libtiff libpng jpeg little-cms2 llvm
    - name: Clone Hoyt's Color Bleed Repo
      run: |
        git clone https://github.com/xsscx/PatchIccMAX.git
        cd PatchIccMAX
        git checkout research
    - name: Demonstration measurement and analysis toolchain for ICC profiles
      run: |
          echo ""
          echo "Little ICC Scanner v.01 [licc]"
          echo "[Research Branch | v.2.3.0 | -lIccProfLib2 -lIccXML2 -llcms2]"
          echo "Copyright (¬©) 2022-2025 David H Hoyt LLC. All rights reserved."
          echo "Demonstration measurement and analysis toolchain for ICC profiles."
          echo "Evaluate AToB/BToA transform integrity for RGB and CMYK workflows"
          echo "Detect malformed, corrupted, or heuristics in ICC profiles"
          echo "Log detailed tag structure and potential exploit vectors"
          echo "Bug Class: Profile Bleed | https://srd.cx/cve-2022-26730"
          echo ""

    - name: Build Debug Tooling
      run: |
        cd PatchIccMAX/Build
        export CC=clang
        export CXX=clang++
        sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h
        cmake -DCMAKE_INSTALL_PREFIX="$HOME/.local" -DCMAKE_BUILD_TYPE=Debug -DENABLE_TOOLS=ON -DENABLE_SHARED_LIBS=ON -DENABLE_STATIC_LIBS=ON -DENABLE_TESTS=ON -DENABLE_INSTALL_RIM=ON -DENABLE_ICCXML=ON -DCMAKE_CXX_FLAGS="-g -fsanitize=address,undefined -fno-omit-frame-pointer -Wall -I/opt/homebrew/include -L/opt/homebrew/lib" -DCMAKE_CXX_FLAGS="-w" -DCMAKE_C_FLAGS="-w" -DCMAKE_CXX_FLAGS="-w" -DCMAKE_C_FLAGS="-w" -Wno-dev Cmake/
        make -j$(nproc)
        
    - name: Build Color Bleed Demo Scanner with Code Coverage
      run: |
        cd PatchIccMAX/contrib/Build/cmake/cov
        export CC=clang
        export CXX=clang++
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        bash build_runner.sh 2>&1 | tee build_arm64.log
        # tree -a 2>&1 | tee tree_arm64.log

    - name: Run Color Bleed Scanner Demo
      run: |
          cd PatchIccMAX/contrib/Build/cmake/cov
          # Add Tools/* to PATH
          for d in ./*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          echo "=== Switch to licc Directory ==="
          cd licc || { echo "ERROR: 'licc' directory not found"; exit 0; }
          echo "=== Starting Compilation with g++ (with ASan/UBSan) ==="
          set -x
          rm -f licc *.profraw *.profdata
          clang++ -stdlib=libc++ -std=c++17 -w -fsanitize=address,undefined -fno-omit-frame-pointer -fno-optimize-sibling-calls -fprofile-instr-generate -fcoverage-mapping -g3 -O1 -Wall -Wextra -Wpedantic -Wno-unused-parameter -Wno-type-limits -Wno-overloaded-virtual -I../../../../../IccProfLib -I../../../../../IccXML/IccLibXML -I/usr/local/include -I/opt/homebrew/include -DPLATFORM_MACOS -DARCH_X64 -o licc licc.cpp -L/usr/local/lib -L/opt/homebrew/lib -L../iccProfLib -L../iccXmlLib -lIccProfLib2 -lIccXML2 -llcms2 -lz -lm -lc++abi -fprofile-instr-generate -fcoverage-mapping
          set +x
          echo "=== Compilation Complete ==="
          ls -lh licc || echo "ERROR: licc binary not created"
          echo "=== licc Testing Start ==="
          for f in \
            ../../../../UnitTest/cve-2023-46602.icc \
            ../../../../UnitTest/icPlatformSignature-ubsan-poc.icc \
            ../../../../UnitTest/icSigMatrixElemType-Read-poc.icc \
            ../../../../../Testing/; do
            echo "--- Running: $f ---"
            LLVM_PROFILE_FILE="licc.profraw" ./licc -v 1 "$f" || echo "Run on $f exited with code $?"
          done
          echo "=== licc Testing Complete ==="
          cd ..
          echo "PoC tests executed. Ignoring exit codes by design."
          echo "========= EXITING INNER STUB for Color Bleed Scanner Demo ========="
          exit 0
    - name: BATCH 1 - iccMAX Create All Profiles
      run: |
          echo "========= BEGIN INSIDE STUB for iccMAX Measurements =============="
          cd PatchIccMAX/Testing
          pwd
          # Add Tools/* to PATH
          for d in ../Build/Tools/*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          set +e
          echo "========= BEGIN iccFromXml CreateAllProfiles.sh ========"
          pwd
          sh CreateAllProfiles.sh
          echo "========= DONE INSIDE STUB for iccMAX Measurements =============="
          
          echo "========= SIPS Output =============="
          echo "Measurement: sips --verify Display/Rec2100HlgNarrow.icc"
          sips --verify Display/Rec2100HlgNarrow.icc
          
          echo "Measurement: iccDumpProfile -v Display/Rec2100HlgNarrow.icc"
          iccDumpProfile -v Display/Rec2100HlgNarrow.icc
          
          echo "Measurement: iccRoundTrip Display/Rec2100HlgNarrow.icc"
          iccDumpProfile Display/Rec2100HlgNarrow.icc
          echo "========= EXIT  mtx-research-stub ========"
          echo "========= BEGIN INNER STUB run file %f for description ========"
          set +e
          echo "RUN file"
          echo -n "Found ICC files: "; find Issue113/ -type f -name "*.icc" -print0 | tee >(tr '\0' ' ') | while IFS= read -r -d '' f; do echo ">>> FILE: $f"; file "$f" || true; done
          echo "RUN sips"
          echo -n "Found ICC files: "; find Issue113/ -type f -name "*.icc" -print0 | tee >(tr '\0' ' ') | while IFS= read -r -d '' f; do echo ">>> SIPS: $f"; sips --verify "$f" || true; done
          echo "=========  EXIT INNER STUB run file %f for description ========="
          
          echo "=================== Running sips --verify Checks off xnu-research Branch =========================================" 
          echo "RUN sips"
          echo -n "Found ICC files: "; find . -type f -name "*.icc" -print0 | tee >(tr '\0' ' ') | while IFS= read -r -d '' f; do echo ">>> SIPS: $f"; sips --verify "$f" || true; done
          echo "========= INSIDE STUB EXIT ========="
 
          EXIT_CODE=$?
          if [ "$EXIT_CODE" -ne 0 ]; then
          echo "mtx-research-stub executed as expected with failure code $EXIT_CODE."
          else
          echo "mtx-research-stub unexpectedly succeeded. Please verify runtime behavior."
          fi
          echo "========= EXIT OUTSIDE COV STUB for mtx-research-stub ========="
    - name: BATCH 2 - Run iccDumpProfile, iccroundTrip tools measurements on Testing/
      run: |
          echo "========= BEGIN  Little ICC Scanner STUB ========="
          cd PatchIccMAX/Testing
          pwd
          # Add Tools/* to PATH
          for d in ../Build/Tools/*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          echo "========= BEGIN INSIDE STUB ========="
          echo "=================== Running Issue 113 Checks off research Branch ========================================="
          # sh CreateAllProfiles.sh
          set +e
          echo "RUN iccDumpProfile"
          dir=../Testing; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && echo ">>> Dumping: $f" && ../Build/Tools/IccDumpProfile/iccDumpProfile -v "$f"; done || true
          echo "RUN iccRoundTrip"
          dir=../Testing; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && echo ">>> RoundTripping: $f" && ../Build/Tools/IccRoundTrip/iccRoundTrip "$f"; done || true
    - name: BATCH 3 - Type Confusion in iccMAX
      shell: bash
      run: |
           cd PatchIccMAX/Testing
             # Add Tools/* to PATH
             for d in ../Build/Tools/*; do
             [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
             done
             set +e
              echo "RUN TC PoC"
              echo "‚ñ∂Ô∏è Executing PoC: NaN detected in icDeltaE::dL() and runtime error: downcast of type CIccTagLutAtoB"
              echo "=================== Running TC PoC off research Branch ========================================="
              echo "PoC iccRoundTrip Testing/ICS/Rec2100HlgFull-Part2.icc"
              echo "Issue: IccProfLib/IccEval.cpp:141:28: runtime error: downcast of address which does not point to CIccTagLutAtoB"
              echo "Entering Crash...."

              set +e  # Allow crash without failing CI
              ../Build/Tools/IccRoundTrip/iccRoundTrip ICS/Rec2100HlgFull-Part2.icc
              EXIT_CODE=$?
              echo "Exit Code: $EXIT_CODE"

              if [ "$EXIT_CODE" -ne 0 ]; then
                echo "üí• PoC executed as expected with failure code $EXIT_CODE."
                echo "‚úÖ Crash = Success (as designed for PoC-NaN-Eval-L141)"
              else
                echo "‚ö†Ô∏è PoC unexpectedly succeeded. Please verify runtime behavior."
              fi
              echo "========= TC TEST HARNESS COMPLETE ========="
              echo "========= INSIDE STUB EXIT ========="
              echo "========= Type Confusion in iccMAX STUB EXIT ========="
              echo "========= OUTSIDE XNU ICC Scanner arm64 STUB EXIT ========="
              # Override exit code to ensure CI step always succeeds
              exit 0

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: iccmax-cov-binaries
        path: PatchIccMAX/contrib/Build/cmake/cov/**/*
        
    - name: Upload build logs and tree
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          PatchIccMAX/contrib/Build/cmake/cov/build_arm64.log
          PatchIccMAX/contrib/Build/cmake/cov/tree_arm64.log

    - name: Upload diagnostics
      uses: actions/upload-artifact@v4
      with:
        name: diagnostics
        path: |
          PatchIccMAX/contrib/Build/cmake/cov/sysinfo.txt
          PatchIccMAX/contrib/Build/cmake/cov/env_dump.txt
    - name: Summary Report
      if: always()
      run: |
        echo "### üß™ XNU arm64 CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Instrumented Build: PatchIccMAX/Build/" >> $GITHUB_STEP_SUMMARY
        echo "- üì¶ Binaries: iccmax-cov-binaries" >> $GITHUB_STEP_SUMMARY
        echo "- üìä Coverage: html-coverage-report (LLVM format)" >> $GITHUB_STEP_SUMMARY
        echo "- üßæ Logs: tree_arm64.log, build_arm64.log" >> $GITHUB_STEP_SUMMARY
