###############################################################
#
## Copyright (©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 18-JULY-2025 at 1300 EDT by David Hoyt (©)
#
## Intent: HEAD-CICD-X6
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: "HEAD-X6"

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build and Test Linux at master HEAD
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.check.outputs.success }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git anonymous identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libpng-dev libxml2 libxml2-dev libtiff-dev nlohmann-json3-dev build-essential \
            cmake clang clang-tools python3 python3-pip libwxgtk3.2-dev wx-common \
            libopencl-clang-17-dev curl git llvm clang-17 libjpeg-dev

      - name: Clone the PatchIccMAX repository
        run: |
          git clone https://github.com/xsscx/PatchIccMAX.git
          cd PatchIccMAX

      - name: Configure the build with CMake
        run: |
          cd PatchIccMAX/Build
          export CC=gcc
          export CXX=g++
          export PATH="/usr/lib/llvm-17/bin:$PATH"
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          clang++ --version
          clang --version
          cmake -DCMAKE_INSTALL_PREFIX="$HOME/.local" -DCMAKE_BUILD_TYPE=Debug \
                -DENABLE_TOOLS=ON -DENABLE_SHARED_LIBS=ON -DENABLE_STATIC_LIBS=ON \
                -DENABLE_TESTS=ON -DENABLE_INSTALL_RIM=ON -DENABLE_ICCXML=ON \
                -Wno-dev -DCMAKE_CXX_FLAGS="-g -fsanitize=address,undefined -fno-omit-frame-pointer -Wall" \
                -Wno-dev Cmake/

      - name: Build project with CMake and run test suite
        run: |
          set +e  # Disable exit-on-error
          echo "🛠️ Building PatchIccMAX..."
          cd PatchIccMAX/Build || exit 1
          make -j$(nproc)
          build_status=$?
          echo "Build completed with status $build_status"
          pwd && ls
 
          echo "📂 Entering Testing directory..."
          cd ../Testing || exit 1
          pwd && ls

          echo "📌 Updating PATH with tool directories..."
          for d in ../Build/Tools/*; do
          [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done

          echo "🧪 Downloading and running iccMAX CI build checks..."
          curl -fsSL -o iccMAX-cicd-build-checks.sh https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/research/contrib/UnitTest/iccMAX-cicd-build-checks.sh
          chmod +x iccMAX-cicd-build-checks.sh
          ./iccMAX-cicd-build-checks.sh 2>&1 | tee runner-output.log
          checks_status=$?
          echo "CI build checks completed with status $checks_status"

          echo "🧪 Running CalcTest test_icc_apply_named_cmm.sh..."
          cd ../Build || exit 1
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/research/contrib/CalcTest/test_icc_apply_named_cmm.sh)"
          calc_status=$?
          echo "CalcTest script completed with status $calc_status"

          echo "📁 Returning to root project directory..."
          cd .. || exit 1
          pwd && ls

          echo ""
          echo "✅ Build and test phase completed (non-blocking mode)."
          echo "Build exit code      : $build_status"
          echo "CI checks exit code  : $checks_status"
          echo "CalcTest exit code   : $calc_status"
          echo ""

          echo "🧾 Final Result: Ignoring failures for manual inspection. All steps executed."
          exit 0

          
      - name: Check build success
        id: check
        run: |
          if [ -f PatchIccMAX/Build/CMakeCache.txt ]; then
            echo "✅ Build configuration exists."
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Build configuration failed."
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: master-build-linux
          path: PatchIccMAX/Build

      - name: Upload profile test logs
        uses: actions/upload-artifact@v4
        with:
          name: runner-output
          path: PatchIccMAX/Testing/runner-output.log
