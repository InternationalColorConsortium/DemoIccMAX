###############################################################
#
## Copyright (¬©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 24-MAR-2025 1737 EDT by David Hoyt (¬©)
#
## Intent: PR128-Build
#
## TODO: Refactor for XNU Universal Build
#
#
###############################################################

name: PR128-Build

on:
  workflow_dispatch:

jobs:
  linux:
    name: "Linux ${{ matrix.compiler }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    steps:
      - name: Checkout PR128
        uses: actions/checkout@v4
        with:
          ref: pr128
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake gcc g++ clang clang-tools libpng-dev libxml2 libxml2-dev libtiff-dev nlohmann-json3-dev libwxgtk3.2-dev wx-common python3 python3-pip curl git llvm
      - name: Set Compiler
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
      - name: CMake Configure
        run: |
          cd Build
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local -DCMAKE_BUILD_TYPE=Release  -DENABLE_TOOLS=ON -DENABLE_STATIC_LIBS=ON -DENABLE_SHARED_LIBS=ON -Wno-dev Cmake/
      - name: Build
        run: |
          cd Build
          make -j$(nproc)
      - name: Verify CMake Cache
        run: |
          test -f Build/CMakeCache.txt && echo "? Build OK" || (echo "? Failed" && exit 1)
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-linux-${{ matrix.compiler }}
          path: Build

  macos:
    name: "macOS Clang"
    runs-on: macos-latest
    steps:
      - name: Checkout PR128
        uses: actions/checkout@v4
        with:
          ref: pr128

      - name: Clone repository and install dependencies
        run: |
          echo "üì• Cloning PatchIccMAX repository..."
          git clone https://github.com/xsscx/PatchIccMAX.git
          cd PatchIccMAX
          git checkout pr128
          echo "üì¶ Installing Homebrew dependencies..."
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff jpeg || echo "‚ö†Ô∏è Some dependencies might already be installed."
          echo "‚úî Dependency installation complete."
  
      - name: CMake Configure
        run: |
          echo "‚öôÔ∏è Setting up CMake build configuration..."
          mkdir -p PatchIccMAX/Build
          cd PatchIccMAX/Build
          sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h
          echo 'export PATH="/opt/homebrew/opt/jpeg/bin:$PATH"' >> /Users/runner/.bash_profile
          export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig"
          export CFLAGS="-I$(brew --prefix libpng)/include -I$(brew --prefix jpeg)/include"
          export LDFLAGS="-L$(brew --prefix libpng)/lib -L$(brew --prefix jpeg)/lib"
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
                -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_TOOLS=ON \
                -DENABLE_STATIC_LIBS=ON \
                -DENABLE_SHARED_LIBS=ON \
                -DJPEG_LIBRARY=$(brew --prefix jpeg)/lib/libjpeg.dylib \
                -DJPEG_INCLUDE_DIR=$(brew --prefix jpeg)/include \
                -Wno-dev Cmake/
          echo "‚úî CMake configuration complete."
      
      - name: Build
        run: |
          echo "üõ†Ô∏è Starting build process..."
          cd PatchIccMAX/Build
          make -j$(sysctl -n hw.ncpu)
          echo "‚úî Build process completed. Listing generated files..."
  windows:
    name: "Windows MSVC"
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Restore vcpkg Cache
        uses: actions/cache@v3
        with:
          path: C:\test\vcpkg
          key: Win70-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/bootstrap-vcpkg.bat') }}
          restore-keys: |
            Win70-${{ runner.os }}-
      - name: Setup Environment & Build Preparation
        shell: pwsh
        run: |
          Write-Host "============================= Starting Build =============================" -ForegroundColor Green
          Write-Host "C 2024-2025 David H Hoyt LLC. All rights reserved." -ForegroundColor Green
          
          $env:VSCMD_ARG_HOST_ARCH = "x64"
          $env:VSCMD_ARG_TGT_ARCH = "x64"
          
          $optDir = "C:\test"
          $vcpkgDir = "$optDir\vcpkg"
          $patchDir = "$optDir\PatchIccMAX"
          
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          
          if (-Not (Test-Path $optDir)) { New-Item -ItemType Directory -Path $optDir | Out-Null }
          if (-Not (Test-Path "$vcpkgDir\vcpkg.exe")) {
              git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
              & "$vcpkgDir\bootstrap-vcpkg.bat"
          }
          if (-Not (Test-Path "$vcpkgDir\vcpkg.exe")) {
              Write-Host "? ERROR: vcpkg failed to install!" -ForegroundColor Red
              exit 1
          }
          $packages = @(
          "libpng:x64-windows", "jpeg:x64-windows", "jpeg:x64-windows-static",
          "nlohmann-json:x64-windows", "nlohmann-json:x64-windows-static",
          "libxml2:x64-windows", "libxml2:x64-windows-static",
          "tiff:x64-windows", "tiff:x64-windows-static",
          "wxwidgets:x64-windows", "wxwidgets:x64-windows-static"
          )
          foreach ($pkg in $packages) { & "$vcpkgDir\vcpkg.exe" install $pkg }
      - name: Clone PatchIccMAX Repository
        shell: pwsh
        run: |
          $patchDir = "C:\test\PatchIccMAX"
          if (Test-Path $patchDir) { Remove-Item -Recurse -Force $patchDir }
          git clone https://github.com/xsscx/PatchIccMAX.git $patchDir
          cd $patchDir
          git checkout pr128
      - name: Configure & Build with CMake
        shell: pwsh
        run: |
          cd C:\test\PatchIccMAX\Build\Cmake
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=C:/test/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DCMAKE_C_FLAGS="/MD /I C:/test/vcpkg/installed/x64-windows/include" `
            -DCMAKE_CXX_FLAGS="/MD /I C:/test/vcpkg/installed/x64-windows/include" `
            -DCMAKE_SHARED_LINKER_FLAGS="/LIBPATH:C:/test/vcpkg/installed/x64-windows/lib" `
            -DENABLE_TOOLS=ON `
            -DENABLE_SHARED_LIBS=ON `
            -DENABLE_STATIC_LIBS=ON `
            -DENABLE_TESTS=ON `
            -DENABLE_INSTALL_RIM=ON `
            -DENABLE_ICCXML=ON
          cmake --build build --config Release -- /m /maxcpucount:32
      - name: Verify Build Output
        shell: pwsh
        run: |
          $cmakeCache = "C:\test\PatchIccMAX\Build\Cmake\build\CMakeCache.txt"
          if (Test-Path $cmakeCache) {
            Write-Host "? Build succeeded. CMake cache found."
          } else {
            Write-Host "? Build failed! No CMakeCache.txt found."
            exit 1
          }
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-Artifacts
          path: C:\test\PatchIccMAX

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: C:\test\PatchIccMAX\Build\Cmake\build\CMakeCache.txt

      - name: Host System Info
        shell: pwsh
        run: |
          systeminfo
          Get-CimInstance -ClassName Win32_Processor
