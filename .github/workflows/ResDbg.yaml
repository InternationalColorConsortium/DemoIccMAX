###############################################################
#
## Copyright (©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 02-MAY-2025 at 0900 EDT by David Hoyt (©)
#
## Intent: ResDbg
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: "ResDbg"

on:
  workflow_dispatch:

jobs:
  build:
    name: "🔧 Build on ${{ matrix.os }} with ${{ matrix.compiler }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            compiler: gcc
          - os: ubuntu-22.04
            compiler: clang
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
#          - os: macos-latest
#            compiler: clang
#          - os: macos-13
#            compiler: clang

    steps:
      - name: 🧾 Checkout PR Source
        uses: actions/checkout@v4
        with:
          ref: ${{ startsWith(matrix.os, 'macos') && 'research' || 'research' }}

      - name: 💾 Restore Build Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache
            ~/.ccache
            Build
          key: ${{ runner.os }}-build-${{ matrix.compiler }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.compiler }}-
      - name: ⚙️ Configure Git Identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: 📦 Install Build Dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libjpeg-dev cmake gcc g++ clang clang-tools libgtk-3-dev libpng-dev libjpeg-dev libtiff-dev libexpat1-dev libxml2 libxml2-dev nlohmann-json3-dev python3 python3-pip curl git llvm
      - name: 🍺 Install Build Dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff jpeg
      - name: 🧱 Build wxWidgets (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          git clone https://github.com/wxWidgets/wxWidgets.git
          cd wxWidgets
          git submodule update --init --recursive
          ./configure --enable-debug --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          sudo ldconfig
      - name: 💡 Set Compiler Environment
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
      - name: 🛠️ CMake Configure
        run: |
         cd Build
         if [[ "$RUNNER_OS" == "macOS" ]]; then
         export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include"
         export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig"
         export CFLAGS="-I$(brew --prefix libpng)/include -I$(brew --prefix jpeg)/include"
         export LDFLAGS="-L$(brew --prefix libpng)/lib -L$(brew --prefix jpeg)/lib"
         JPEG_LIB="$(brew --prefix jpeg)/lib/libjpeg.dylib"
         JPEG_INC="$(brew --prefix jpeg)/include"
         else
         JPEG_LIB="/usr/lib/x86_64-linux-gnu/libjpeg.so"
         JPEG_INC="/usr/include"
         fi
         cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TOOLS=ON \
          -DENABLE_STATIC_LIBS=ON \
          -DENABLE_SHARED_LIBS=ON \
          -DJPEG_LIBRARY=${JPEG_LIB} \
          -DJPEG_INCLUDE_DIR=${JPEG_INC} \
          -Wno-dev Cmake/
      - name: 🔨 Build Project
        run: |
          cd Build
          make -j$(nproc || sysctl -n hw.logicalcpu)
      - name: 🔨 Run Stub
        run: |
          cd Testing
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/xsscx/PatchIccMAX/refs/heads/pr129/contrib/UnitTest/CreateAllProfiles.sh)"
          ls
          pwd
      - name: Run Unit Tests (CI Harness)
        run: |
          echo "========= BEGIN Stub ========="
          cd Testing
          # Add Tools/* to PATH
          for d in ../Build/Tools/*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          echo "STUB"
          echo "=================== Running Issue 113 Checks off research Branch ========================================="
          echo "The loss of precision you note is consistent with the trade-offs made to support a demonstration implementation, rather than logic ready for production."
          echo "=== Running Test Unit Dump All for Issue 113 ==="      
          set +e
          dir=../Testing/Issue113; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && echo ">>> Dumping: $f" && ../Build/Tools/IccDumpProfile/iccDumpProfile -v "$f"; done || true
          echo "The loss of precision you note is consistent with the trade-offs made to support a demonstration implementation, rather than logic ready for production."
          dir=../Testing/Issue113; for f in "$dir"/*.{icc,icm}; do [ -f "$f" ] && echo ">>> RoundTripping: $f" && ../Build/Tools/IccRoundTrip/iccRoundTrip "$f"; done || true
          echo "The loss of precision you note is consistent with the trade-offs made to support a demonstration implementation, rather than logic ready for production."
          EXIT_CODE=$?
          if [ "$EXIT_CODE" -ne 0 ]; then
          echo "PoC executed as expected with failure code $EXIT_CODE."
          else
          echo "PoC unexpectedly succeeded. Please verify runtime behavior."
          fi
          echo "========= STUB EXIT ========="
      - name: ✅ Verify Build Output
        run: |
          test -f Build/CMakeCache.txt && echo "✅ CMake cache present" || (echo "❌ Build failed" && exit 1)
      - name: 🧳 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-${{ matrix.os }}-${{ matrix.compiler }}-release
          path: Build

      - name: 📄 Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: cmake-log-${{ matrix.os }}-${{ matrix.compiler }}
          path: Build/CMakeCache.txt

      - name: 🖥️ Host System Info
        run: |
          uname -a
          if [[ "${{ matrix.os }}" == macos* ]]; then
            sw_vers
            clang --version
            sysctl -a | grep machdep.cpu
          else
            cat /etc/os-release
            ${{ matrix.compiler }} --version
            lscpu
          fi
          free -m || true
          df -h
      - name: Summary Report
        if: always()
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build Directory: PatchIccMAX/Build/" >> $GITHUB_STEP_SUMMARY
          echo "- Artifacts Uploaded: iccmax-macos-clang" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY
