###############################################################
#
## Copyright (Â©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 10-MAY-2025 at 0700 EDT by David Hoyt (Â©)
#
## Intent: XNU arm64 Little ICC Scanner | Work in Progress
#
## TODO: Instrumentation for AFL=Bool Builds & Report
#

#
#
###############################################################

name: "XNU ICC Scanner arm64"

on:
  workflow_dispatch:

jobs:
  build-macos-arm64:
    name: XNU ICC Scanner arm64
    runs-on: macos-latest

    strategy:
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Git anonymous identity
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
    - name: Install dependencies
      run: |
        brew install nlohmann-json libxml2 wxwidgets libtiff libpng jpeg little-cms2 llvm
    - name: Clone PatchIccMAX (research)
      run: |
        git clone https://github.com/xsscx/PatchIccMAX.git
        cd PatchIccMAX
        git checkout research
    - name: Decscription
      run: |
          echo ""
          echo "Little ICC Scanner v.01 [licc]"
          echo "[Research Branch | v.2.3.0 | -lIccProfLib2 -lIccXML2 -llcms2]"
          echo "Copyright (Â©) 2022-2025 David H Hoyt LLC. All rights reserved."
          echo "Demonstration measurement and analysis toolchain for ICC profiles."
          echo "Evaluate AToB/BToA transform integrity for RGB and CMYK workflows"
          echo "Detect malformed, corrupted, or heuristics in ICC profiles"
          echo "Log detailed tag structure and potential exploit vectors"
          echo "Bug Class: Profile Bleed | https://srd.cx/cve-2022-26730"
          echo ""
 
    - name: Build Instrumented iccMAX Libs & Tools
      run: |
        cd PatchIccMAX/contrib/Build/cmake/cov
        export CC=clang
        export CXX=clang++
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        bash xnu_build.sh 2>&1 | tee build_arm64.log
    - name: Build & Run Little ICC Scanner Demo
      run: |
          cd PatchIccMAX/contrib/Build/cmake/cov
          # Add Tools/* to PATH
          for d in ./*; do
            [ -d "$d" ] && export PATH="$(realpath "$d"):$PATH"
          done
          echo "=== Changing to PatchIccMAX/contrib/Build/cmake/cov/licc Directory ==="
          cd licc || { echo "ERROR: 'licc' directory not found"; exit 0; }
          echo "=== Starting Compilation of instrumented asan Little ICC Scanner ==="
          set -x
          rm -f licc *.profraw *.profdata
          clang++ -stdlib=libc++ -std=c++17 -fsanitize=address,undefined -fno-omit-frame-pointer -fno-optimize-sibling-calls -fprofile-instr-generate -fcoverage-mapping -g3 -O1 -Wall -Wextra -Wpedantic -Wno-unused-parameter -Wno-type-limits -Wno-overloaded-virtual -I../../../../../IccProfLib -I../../../../../IccXML/IccLibXML -I/usr/local/include -I/opt/homebrew/include -DPLATFORM_MACOS -DARCH_X64 -o licc licc.cpp -L/usr/local/lib -L/opt/homebrew/lib -L../iccProfLib -L../iccXmlLib -lIccProfLib2 -lIccXML2 -llcms2 -lz -lm -lc++abi -fprofile-instr-generate -fcoverage-mapping
          set +x
          echo "=== Compilation Complete ==="
          ls -lh licc || echo "ERROR: licc binary not created"
          echo "=== licc Testing Start ==="
          for f in \
            ../../../../UnitTest/cve-2023-46602.icc \
            ../../../../UnitTest/icPlatformSignature-ubsan-poc.icc \
            ../../../../UnitTest/icSigMatrixElemType-Read-poc.icc; do
            echo "--- Running: $f ---"
            LLVM_PROFILE_FILE="licc.profraw" ./licc -v 1 "$f" || echo "Run on $f exited with code $?"
          done
          echo "=== licc Testing Complete ==="
          cd ..
          echo "PoC tests executed. Ignoring exit codes by design."
          exit 0
          echo "=================== Exiting PatchIccMAX/contrib/Build/cmake/cov/licc ========================================="
         
    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: iccmax-cov-binaries
        path: PatchIccMAX/contrib/Build/cmake/cov/**/*

    - name: Summary Report
      if: always()
      run: |
        echo "### ðŸ§ª XNU arm64 CI Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Instrumented Build: PatchIccMAX/Build/" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“¦ Binaries: iccmax-cov-binaries" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“Š Coverage: html-coverage-report (LLVM format)" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ§¾ Logs: build.log, tree.txt, sysinfo.txt" >> $GITHUB_STEP_SUMMARY
