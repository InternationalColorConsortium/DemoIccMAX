###############################################################
#
## Copyright (©) 2024-2025 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 09-APRIL-2025 -800 EDT by David Hoyt (©)
#
## Intent: PR129-xnu-ubu
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
#
#
#
#
#
#
#
###############################################################

name: "PR129-xnu-ubu"

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: "🔧 Build with ${{ matrix.compiler }}"
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]

    steps:
    - name: 🧾 Checkout PR129
      uses: actions/checkout@v4
      with:
        ref: pr129

    - name: ⚙️ Configure Git Identity
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
    - name: 📦 Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libjpeg-dev  cmake gcc g++ clang clang-tools libpng-dev libxml2 libxml2-dev libtiff-dev nlohmann-json3-dev libwxgtk3.2-dev wx-common python3 python3-pip curl git llvm
 
    - name: 💡 Set Compiler Environment
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
    - name: 🛠️ CMake Configure
      run: |
        cd Build
        cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
              -DCMAKE_BUILD_TYPE=Release \
              -DENABLE_TOOLS=ON \
              -DENABLE_STATIC_LIBS=ON \
              -DENABLE_SHARED_LIBS=ON \
              -Wno-dev Cmake/
    - name: 🔨 Build Project
      run: |
        cd Build
        make -j$(nproc)
    - name: ✅ Verify Build Output
      run: |
        test -f Build/CMakeCache.txt && echo "✅ CMake cache present" || (echo "❌ Build failed" && exit 1)
    - name: 🧳 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iccmax-${{ matrix.compiler }}-release
        path: Build

    - name: 📄 Upload Logs
      uses: actions/upload-artifact@v4
      with:
        name: cmake-log-${{ matrix.compiler }}
        path: Build/CMakeCache.txt

    - name: 🖥️ Host System Info
      run: |
        uname -a
        cat /etc/os-release
        ${{ matrix.compiler }} --version
        lscpu
        free -m
        df -h

  macos:
    name: "macOS Clang"
    runs-on: macos-latest
    steps:
      - name: Checkout PR129
        uses: actions/checkout@v4
        with:
          ref: pr129
      - name: Install macOS Deps
        run: |
          brew update
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff jpeg
      - name: Set Compiler to Clang
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: CMake Configure
        run: |
          cd Build
          sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h
          echo 'export PATH="/opt/homebrew/opt/jpeg/bin:$PATH"' >> /Users/runner/.bash_profile
          export CPPFLAGS="-I/opt/homebrew/opt/jpeg/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/jpeg/lib/pkgconfig"
          export CFLAGS="-I$(brew --prefix libpng)/include -I$(brew --prefix jpeg)/include"
          export LDFLAGS="-L$(brew --prefix libpng)/lib -L$(brew --prefix jpeg)/lib"
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
                -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_TOOLS=ON \
                -DENABLE_STATIC_LIBS=ON \
                -DENABLE_SHARED_LIBS=ON \
                -DJPEG_LIBRARY=$(brew --prefix jpeg)/lib/libjpeg.dylib \
                -DJPEG_INCLUDE_DIR=$(brew --prefix jpeg)/include \
                -Wno-dev Cmake/
      - name: Build
        run: |
          cd Build
          make -j$(sysctl -n hw.logicalcpu)
      - name: Runner Stub
        run: |
          cd Testing
          pwd
          ls
          # bash CreateAllProfiles.sh
      - name: Verify CMake Cache
        run: |
          test -f Build/CMakeCache.txt && echo "? Build OK" || (echo "? Failed" && exit 1)
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-macos-clang
          path: |
            Build/Tools/**/icc*
            Build/IccProfLib/*.dylib
            Build/IccProfLib/*.a
            Build/IccXML/*.dylib
            Build/IccXML/*.a
