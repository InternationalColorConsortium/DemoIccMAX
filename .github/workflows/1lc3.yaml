###############################################################
#
## Copyright (¬©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 98-APRIL-2025 at 1900 EDT by David Hoyt (¬©)
#
## Intent: 1LC3-MATRIX
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: "1LC3"

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: "üîß Build on ${{ matrix.os }} with ${{ matrix.compiler }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        compiler: [gcc, clang]

    steps:
    - name: üßæ Checkout PR120 explicitly
      uses: actions/checkout@v4
      with:
        ref: pr122

    - name: ‚öôÔ∏è Configure Git Identity
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
    - name: üì¶ Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
        build-essential cmake gcc g++ clang clang-tools \
        libgtk-3-dev libpng-dev libjpeg-dev libtiff-dev libexpat1-dev \
        libxml2 libxml2-dev nlohmann-json3-dev \
        python3 python3-pip curl git llvm
    - name: üß± Build wxWidgets 3.2 from Source
      run: |
        git clone https://github.com/wxWidgets/wxWidgets.git
        cd wxWidgets
        git submodule update --init --recursive
        ./configure --enable-debug --prefix=/usr/local
        make -j$(nproc)
        sudo make install
        sudo ldconfig
    - name: üí° Set Compiler Environment
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
    - name: üõ†Ô∏è CMake Configure
      run: |
        cd Build
        cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
              -DCMAKE_BUILD_TYPE=Release \
              -DENABLE_TOOLS=ON \
              -DENABLE_STATIC_LIBS=ON \
              -DENABLE_SHARED_LIBS=ON \
              -Wno-dev Cmake/
    - name: üî® Build Project
      run: |
        cd Build
        make -j$(nproc)
    - name: ‚úÖ Verify Build Output
      run: |
        test -f Build/CMakeCache.txt && echo "‚úÖ CMake cache present" || (echo "‚ùå Build failed" && exit 1)
    - name: üß≥ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: iccmax-${{ matrix.os }}-${{ matrix.compiler }}-release
        path: Build

    - name: üìÑ Upload Logs
      uses: actions/upload-artifact@v4
      with:
        name: cmake-log-${{ matrix.os }}-${{ matrix.compiler }}
        path: Build/CMakeCache.txt

    - name: üñ•Ô∏è Host System Info
      run: |
        uname -a
        cat /etc/os-release
        ${{ matrix.compiler }} --version
        lscpu
        free -m
        df -h
  build-macos:
    name: "üçé Build macOS (Clang)"
    runs-on: macos-13

    steps:
      - name: üßæ Checkout PR120 explicitly
        uses: actions/checkout@v4
        with:
          ref: pr120

      - name: ‚öôÔ∏è Configure Git Identity
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: üç∫ Install macOS Build Dependencies
        run: |
          brew update
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff
      - name: üí° Set Compiler to Clang
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: üõ†Ô∏è CMake Configure
        run: |
          cd Build
          export CFLAGS="-I$(brew --prefix libpng)/include"
          export LDFLAGS="-L$(brew --prefix libpng)/lib"
          # Disable Mono‚Äôs png.h from polluting headers
          if [ -d "/Library/Frameworks/Mono.framework/Headers" ]; then
          sudo mv /Library/Frameworks/Mono.framework/Headers /Library/Frameworks/Mono.framework/Headers_DISABLED
          fi
          sudo rm -rf /Library/Frameworks/Mono.framework/Headers/png.h
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local \
                -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_TOOLS=ON \
                -DENABLE_STATIC_LIBS=ON \
                -DENABLE_SHARED_LIBS=ON \
                -Wno-dev Cmake/
      - name: üî® Build Project
        run: |
          cd Build
          make -j$(sysctl -n hw.logicalcpu)
      - name: ‚úÖ Verify Build Output
        run: |
          test -f Build/CMakeCache.txt && echo "‚úÖ CMake cache present" || (echo "‚ùå Build failed" && exit 1)
      - name: üß≥ Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-macos-clang-release
          path: Build

      - name: üìÑ Upload macOS Logs
        uses: actions/upload-artifact@v4
        with:
          name: cmake-log-macos
          path: Build/CMakeCache.txt

      - name: üñ•Ô∏è macOS System Info
        run: |
          uname -a
          sw_vers
          clang --version
          sysctl -a | grep machdep.cpu
          df -h
