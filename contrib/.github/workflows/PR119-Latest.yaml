###############################################################
#
## Copyright (¬©) 2024-2025 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 22-MAR-2025 1315 EST by David Hoyt (¬©)
#
## Intent: PR119-Latest
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: PR119-Latest

on:
  workflow_dispatch:

jobs:
  linux:
    name: "üß™ Linux ${{ matrix.compiler }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    steps:
      - name: üì• Checkout PR119
        uses: actions/checkout@v4
        with:
          ref: pr119
      - name: üõ†Ô∏è Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y             build-essential cmake gcc g++ clang clang-tools             libpng-dev libxml2 libxml2-dev libtiff-dev             nlohmann-json3-dev libwxgtk3.2-dev wx-common             python3 python3-pip curl git llvm
      - name: üîß Set Compiler
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          else
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi
      - name: ‚öôÔ∏è CMake Configure
        run: |
          cd Build
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local                 -DCMAKE_BUILD_TYPE=Release                 -DENABLE_TOOLS=ON                 -DENABLE_STATIC_LIBS=ON                 -DENABLE_SHARED_LIBS=ON                 -Wno-dev Cmake/
      - name: üèóÔ∏è Build
        run: |
          cd Build
          make -j$(nproc)
      - name: üßæ Verify CMake Cache
        run: |
          test -f Build/CMakeCache.txt && echo "‚úÖ Build OK" || (echo "‚ùå Failed" && exit 1)
      - name: üì§ Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-linux-${{ matrix.compiler }}
          path: Build

  macos:
    name: "üçé macOS Clang"
    runs-on: macos-latest
    steps:
      - name: üì• Checkout PR119
        uses: actions/checkout@v4
        with:
          ref: pr119
      - name: üõ†Ô∏è Install macOS Deps
        run: |
          brew update
          brew install libpng nlohmann-json libxml2 wxwidgets libtiff
      - name: üîß Set Compiler to Clang
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      - name: ‚öôÔ∏è CMake Configure
        run: |
          cd Build
          cmake -DCMAKE_INSTALL_PREFIX=$HOME/.local                 -DCMAKE_BUILD_TYPE=Release                 -DENABLE_TOOLS=ON                 -DENABLE_STATIC_LIBS=ON                 -DENABLE_SHARED_LIBS=ON                 -Wno-dev Cmake/
      - name: üèóÔ∏è Build
        run: |
          cd Build
          make -j$(sysctl -n hw.logicalcpu)
      - name: üßæ Verify CMake Cache
        run: |
          test -f Build/CMakeCache.txt && echo "‚úÖ Build OK" || (echo "‚ùå Failed" && exit 1)
      - name: üì§ Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iccmax-macos-clang
          path: Build

  windows:
    name: "ü™ü Windows MSVC"
    runs-on: windows-latest
    steps:
      - name: üîπ Checkout Repository
        uses: actions/checkout@v4

      - name: üîπ Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: üîπ Restore vcpkg Cache
        uses: actions/cache@v3
        with:
          path: C:\test\vcpkg
          key: Win70-${{ runner.os }}-${{ hashFiles('**/vcpkg.json', '**/bootstrap-vcpkg.bat') }}
          restore-keys: |
            Win70-${{ runner.os }}-
      - name: üîπ Setup Environment & Build Preparation
        shell: pwsh
        run: |
          Write-Host "============================= Starting Build =============================" -ForegroundColor Green
          Write-Host "¬© 2024-2025 David H Hoyt LLC. All rights reserved." -ForegroundColor Green
          
          $env:VSCMD_ARG_HOST_ARCH = "x64"
          $env:VSCMD_ARG_TGT_ARCH = "x64"
          
          $optDir = "C:\test"
          $vcpkgDir = "$optDir\vcpkg"
          $patchDir = "$optDir\PatchIccMAX"
          
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          
          if (-Not (Test-Path $optDir)) { New-Item -ItemType Directory -Path $optDir | Out-Null }
          if (-Not (Test-Path "$vcpkgDir\vcpkg.exe")) {
              git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
              & "$vcpkgDir\bootstrap-vcpkg.bat"
          }
          if (-Not (Test-Path "$vcpkgDir\vcpkg.exe")) {
              Write-Host "‚ùå ERROR: vcpkg failed to install!" -ForegroundColor Red
              exit 1
          }
          $packages = @(
            "libpng:x64-windows", "nlohmann-json:x64-windows", "nlohmann-json:x64-windows-static",
            "libxml2:x64-windows", "tiff:x64-windows", "wxwidgets:x64-windows",
            "libxml2:x64-windows-static", "tiff:x64-windows-static", "wxwidgets:x64-windows-static"
          )
          foreach ($pkg in $packages) { & "$vcpkgDir\vcpkg.exe" install $pkg }
      - name: üîπ Clone PatchIccMAX Repository
        shell: pwsh
        run: |
          $patchDir = "C:\test\PatchIccMAX"
          if (Test-Path $patchDir) { Remove-Item -Recurse -Force $patchDir }
          git clone https://github.com/xsscx/PatchIccMAX.git $patchDir
          cd $patchDir
          git checkout pr119
      - name: üîπ Configure & Build with CMake
        shell: pwsh
        run: |
          cd C:\test\PatchIccMAX\Build\Cmake
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE=C:/test/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DCMAKE_C_FLAGS="/MD /I C:/test/vcpkg/installed/x64-windows/include" `
            -DCMAKE_CXX_FLAGS="/MD /I C:/test/vcpkg/installed/x64-windows/include" `
            -DCMAKE_SHARED_LINKER_FLAGS="/LIBPATH:C:/test/vcpkg/installed/x64-windows/lib" `
            -DENABLE_TOOLS=ON `
            -DENABLE_SHARED_LIBS=ON `
            -DENABLE_STATIC_LIBS=ON `
            -DENABLE_TESTS=ON `
            -DENABLE_INSTALL_RIM=ON `
            -DENABLE_ICCXML=ON
          cmake --build build --config Release -- /m /maxcpucount:32
      - name: ‚úÖ Verify Build Output
        shell: pwsh
        run: |
          $cmakeCache = "C:\test\PatchIccMAX\Build\Cmake\build\CMakeCache.txt"
          if (Test-Path $cmakeCache) {
            Write-Host "‚úÖ Build succeeded. CMake cache found."
          } else {
            Write-Host "‚ùå Build failed! No CMakeCache.txt found."
            exit 1
          }
      - name: üì§ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-Artifacts
          path: C:\test\PatchIccMAX

      - name: üìÑ Upload Build Logs
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: C:\test\PatchIccMAX\Build\Cmake\build\CMakeCache.txt

      - name: üñ•Ô∏è Host System Info
        shell: pwsh
        run: |
          systeminfo
          Get-CimInstance -ClassName Win32_Processor
