#
##
## Copyright (c) 2024-2025. David H Hoyt LLC. All rights reserved.
##
## Written by David Hoyt
## Date: 14-MAY-2025 1000 EDT
#
# Branch: research
# Intent: Makefile for building instrumented libIccXML2.a and checking LLVM coverage symbols
# Production: TRUE
# Runner: TRUE
#
#
# Updates:  Coverage Scope
#
#
#
#
#
## Makefile for building instrumented libIccXML2.a and checking LLVM coverage symbols

#

CC=afl-clang-fast
CXX=afl-clang-fast++
CFLAGS+=-fsanitize=address -fno-omit-frame-pointer -O1
CXXFLAGS+=-fsanitize=address -fno-omit-frame-pointer -O1
LDFLAGS+=-fsanitize=address

# Optional hardened mode or trace-pc-guard
CFLAGS+=-fsanitize-coverage=trace-pc-guard
CXXFLAGS+=-fsanitize-coverage=trace-pc-guard

# Define this if using AFL's hardened mode (optional)
# CFLAGS+=-DAFL_HARD
# CXXFLAGS+=-DAFL_HARD

# Uncomment for MSAN instead of ASAN
# CFLAGS+=-fsanitize=memory
# CXXFLAGS+=-fsanitize=memory
# LDFLAGS+=-fsanitize=memory


# === CONFIG ===
CXX := clang++
SRC_PATH := ../../../../../IccXML/IccLibXML
OBJ_PATH := obj
OUT := libIccXML2.a

CXXFLAGS := -O0 -g -w -fno-omit-frame-pointer -fno-limit-debug-info -fno-inline \
            -fprofile-instr-generate -fcoverage-mapping \
            -Wall -Wextra -Wpedantic -std=c++17 \
            -I$(SRC_PATH) -I../../../../../IccProfLib \
            -I/usr/include/libxml2

# === SOURCES ===
SRCS := $(wildcard $(SRC_PATH)/*.cpp)
OBJS := $(patsubst $(SRC_PATH)/%.cpp,$(OBJ_PATH)/%.o,$(SRCS))

.PHONY: all clean check-prof

# === BUILD LIB ===
all: $(OUT)

$(OUT): $(OBJS)
	@echo "[AR] Creating $@"
	@ar rcs $@ $(OBJS)

$(OBJ_PATH)/%.o: $(SRC_PATH)/%.cpp | $(OBJ_PATH)
	@echo "[CXX] Compiling $<"
	@$(CXX) $(CXXFLAGS) -c $< -o $@

$(OBJ_PATH):
	@mkdir -p $(OBJ_PATH)

# === CLEAN ===
clean:
	@echo "[CLEAN] Removing object files and archive"
	@rm -rf $(OBJ_PATH) $(OUT)

# === COVERAGE CHECK ===
check-prof: $(OUT)
	@echo "[CHECK] Extracting and checking instrumentation in $(OUT)"
	@rm -f __tmp_profcheck_*.o
	@ar -x $(OUT)
	@FOUND=0; \
	for f in *.o; do \
		llvm-objdump -h "$$f" | grep -q __llvm_prf_data && \
		echo "  → [INSTRUMENTED] $$f" && FOUND=1; \
	done; \
	if [ $$FOUND -eq 0 ]; then \
		echo "❌ No instrumentation symbols found."; \
		exit 1; \
	else \
		echo "✅ Instrumentation detected."; \
	fi; \
	rm -f *.o
