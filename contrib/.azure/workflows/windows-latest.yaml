trigger:
  - master

pool:
  vmImage: 'windows-latest  # Pre-installed VS2022 for faster builds

variables:
  BuildConfiguration: 'Debug'
  # Define the environment variable paths as per the README
  LIBTIFF_INCLUDE: '$(Build.SourcesDirectory)\vcpkg\installed\x64-windows\include'
  LIBTIFF_LIBDIR: '$(Build.SourcesDirectory)\vcpkg\installed\x64-windows\lib'
  LIBTIFF_DLIB: 'tiff.lib'
  LIBXML2: '$(Build.SourcesDirectory)\vcpkg\installed\x64-windows'
  ICONV: '$(Build.SourcesDirectory)\vcpkg\installed\x64-windows'
  WXWIN: '$(Build.SourcesDirectory)\vcpkg\installed\x64-windows'
  WXVER: '28'
  EIGEN: '$(Build.SourcesDirectory)\vcpkg\installed\x64-windows'

steps:
# Step to check out the repository (this will check out the branch that triggers the pipeline, e.g., main)
- checkout: self
  clean: true
  persistCredentials: true

# Remove cache for troubleshooting
# Commenting out the cache to ensure no old artifacts are used

# Step to clean any existing artifacts before build
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Cleaning workspace..."
      if (Test-Path "$(Build.SourcesDirectory)\vcpkg") {
        Remove-Item -Recurse -Force "$(Build.SourcesDirectory)\vcpkg"
        Write-Host "vcpkg directory removed."
      } else {
        Write-Host "vcpkg directory does not exist, skipping removal."
      }
  displayName: 'Clean Workspace'


# Step to install vcpkg libraries
- powershell: |
    $vcpkgDir = "$(Build.SourcesDirectory)\vcpkg"
    
    if (-not (Test-Path "$vcpkgDir")) {
        git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
    }

    cd $vcpkgDir

    if (-not (Test-Path ".\vcpkg.exe")) {
        Write-Host "Bootstrapping vcpkg..."
        .\bootstrap-vcpkg.bat
        if ($LASTEXITCODE -ne 0) {
            Write-Error "vcpkg bootstrap failed"
            exit 1
        }
    }
    
    # Install necessary libraries with debug flag for detailed output
    Write-Host "Installing libraries using vcpkg..."
    .\vcpkg.exe integrate install
    if ($LASTEXITCODE -ne 0) {
        Write-Error "vcpkg integration failed"
        exit 1
    }

    .\vcpkg.exe install libxml2:x64-windows nlohmann-json:x64-windows tiff:x64-windows wxwidgets:x64-windows eigen3:x64-windows --debug
    if ($LASTEXITCODE -ne 0) {
        Write-Error "vcpkg library installation failed"
        exit 1
    }

    # Verify that the tiffio.h file exists
    $tiffHeaderPath = "$(Build.SourcesDirectory)\vcpkg\installed\x64-windows\include\tiffio.h"
    if (-not (Test-Path $tiffHeaderPath)) {
        Write-Error "tiffio.h not found after vcpkg install: $tiffHeaderPath"
        exit 1
    } else {
        Write-Host "tiffio.h found at: $tiffHeaderPath"
    }

    Write-Host "vcpkg libraries installed successfully"
  displayName: 'Setup vcpkg'

# Set environment variables for the build process
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Setting environment variables for third-party libraries..."
      [System.Environment]::SetEnvironmentVariable("LIBTIFF_INCLUDE", "$(LIBTIFF_INCLUDE)", "Process")
      [System.Environment]::SetEnvironmentVariable("LIBTIFF_LIBDIR", "$(LIBTIFF_LIBDIR)", "Process")
      [System.Environment]::SetEnvironmentVariable("LIBTIFF_DLIB", "$(LIBTIFF_DLIB)", "Process")
      [System.Environment]::SetEnvironmentVariable("LIBXML2", "$(LIBXML2)", "Process")
      [System.Environment]::SetEnvironmentVariable("ICONV", "$(ICONV)", "Process")
      [System.Environment]::SetEnvironmentVariable("WXWIN", "$(WXWIN)", "Process")
      [System.Environment]::SetEnvironmentVariable("WXVER", "$(WXVER)", "Process")
      [System.Environment]::SetEnvironmentVariable("EIGEN", "$(EIGEN)", "Process")
      Write-Host "Environment variables set."
  displayName: 'Set Environment Variables'

# Build the solution using Visual Studio Build task
- task: VSBuild@1
  inputs:
    solution: '$(Build.SourcesDirectory)\Build\MSVC\BuildAll_v22.sln'
    msbuildArgs: '/m /verbosity:detailed /p:Platform=x64 /p:Configuration=$(BuildConfiguration) /p:AdditionalIncludeDirectories=$(LIBTIFF_INCLUDE) /p:AdditionalLibraryDirectories=$(LIBTIFF_LIBDIR) /p:LIBTIFF_DLIB=$(LIBTIFF_DLIB)'
    configuration: '$(BuildConfiguration)'
  displayName: 'Build DemoIccMAX project'
